apiVersion: v1
kind: Service
metadata:
  name: auth
  namespace: 3495p2
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
  selector:
    app: auth
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth
  namespace: 3495p2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth
  template:
    metadata:
      labels:
        app: auth
    spec:
      containers:
        - name: auth
          image: wenli6887/p2_auth:v4
          envFrom:
            - secretRef:
                name: secret
          command: ["python", "app.py"]
          resources:
            requests:
              cpu: 100m
            limits:
              cpu: 200m

---
apiVersion: v1
kind: Service
metadata:
  name: grade
  namespace: 3495p2
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 5010
      targetPort: 5010
  selector:
    app: grade
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grade
  namespace: 3495p2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grade
  template:
    metadata:
      labels:
        app: grade
    spec:
      containers:
      - name: grade
        image: wenli6887/p2_grade:v4
        envFrom:
          - secretRef:
              name: secret
        command: ["python", "app.py"]
        resources:
          requests:
            cpu: 100m
          limits:
            cpu: 200m
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: 3495p2
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 512Mi
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: 3495p2
spec:
  type: ClusterIP
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: 3495p2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:latest
        envFrom:
          - secretRef:
              name: secret
        ports:
        - containerPort: 3306
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-storage
        readinessProbe:
          exec:
            command: ["mysqladmin", "ping", "-h", "localhost", "-u$(MYSQL_ROOT_USERNAME)", "-p$(MYSQL_ROOT_PASSWORD)"]
          initialDelaySeconds: 10
          periodSeconds: 10
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc


---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
  namespace: 3495p2
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
  namespace: 3495p2
spec:
  type: ClusterIP
  selector:
    app: mongo
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
  namespace: 3495p2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: mongo
          ports:
            - containerPort: 27017
          envFrom:
            - secretRef:
                name: secret
          volumeMounts:
            - name: mongo-storage
              mountPath: /data/db
            - name: mongo-init-script
              mountPath: /docker-entrypoint-initdb.d/mongo-init.js
              subPath: mongo-init.js
          readinessProbe:
            exec:
              command: ["mongosh", "--eval", "db.adminCommand('ping')"]
            initialDelaySeconds: 5
            periodSeconds: 10
      volumes:
        - name: mongo-storage
          persistentVolumeClaim:
            claimName: mongo-pvc
        - name: mongo-init-script
          configMap:
            name: mongo-init-script
---
apiVersion: v1
kind: Service
metadata:
  name: storage
  namespace: 3495p2
spec:
  type: ClusterIP
  selector:
    app: storage
  ports:
    - protocol: TCP
      port: 5020
      targetPort: 5020
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: storage
  namespace: 3495p2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: storage
  template:
    metadata:
      labels:
        app: storage
    spec:
      containers:
      - name: storage
        image: wenli6887/p2_storage:v3
        command: ["sh", "-c", "python db_manage.py drop && exec python app.py"]
        resources:
          requests:
            cpu: 100m
          limits:
            cpu: 200m        
        envFrom:
          - secretRef:
              name: secret
        ports:
        - containerPort: 5020
---        
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: storage-hpa
  namespace: 3495p2
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: storage
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 5
      policies:
      - type: Percent
        value: 50
        periodSeconds: 5
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 5
      - type: Pods
        value: 4
        periodSeconds: 5
      selectPolicy: Max
  # behavior:
  #   scaleDown:
  #     policies:
  #     # - type: Pods
  #     #   value: 4
  #     #   periodSeconds: 60
  #     - type: Percent
  #       value: 50
  #       periodSeconds: 60
---
apiVersion: v1
kind: Service
metadata:
  name: processing
  namespace: 3495p2
spec:
  type: ClusterIP
  selector:
    app: processing
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: processing
  namespace: 3495p2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: processing
  template:
    metadata:
      labels:
        app: processing
    spec:
      containers:
        - name: processing
          image: wenli6887/p2_processing:v3
          ports:
            - containerPort: 3000
          resources:
            requests:
              cpu: 100m
            limits:
              cpu: 200m
          envFrom:
            - secretRef:
                name: secret
---
apiVersion: v1
kind: Service
metadata:
  name: results
  namespace: 3495p2
spec:
  type: ClusterIP
  selector:
    app: results
  ports:
    - protocol: TCP
      port: 5030
      targetPort: 5030
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: results
  namespace: 3495p2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: results
  template:
    metadata:
      labels:
        app: results
    spec:
      containers:
        - name: results
          image: wenli6887/p2_results:v3
          ports:
            - containerPort: 5030
          command: ["python", "app.py"]
          resources:
            requests:
              cpu: 100m
            limits:
              cpu: 200m
          envFrom:
            - secretRef:
                name: secret
